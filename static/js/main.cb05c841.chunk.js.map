{"version":3,"sources":["components/Board/Cell/Cell.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_ref","clickFn","revealed","bomb","cellNum","content","handleRightClick","flag","cellClass","push","cellContent","numColour","num","setNumColour","console","log","react_default","a","createElement","className","join","onClick","onContextMenu","style","color","Board","height","width","numBombs","_useState","useState","_useState2","Object","slicedToArray","gameRunning","setGameState","_useState3","_useState4","bombs","setBombs","numSquares","inBounds","x","y","getAdjCells","filter","cell","createBoard","max","cells","row","numCells","nums","bombPositions","i","randomIdx","length","Math","floor","random","splice","includes","_loop","adjCells","count","forEach","_useState5","_useState6","data","setData","cellCheck","revealedCells","checker","some","numRevealed","item","reduce","curr","next","resetGame","gridTemplateColumns","concat","gridTemplateRows","map","rows","Board_Cell_Cell","e","preventDefault","type","dataCopy","assign","objectSpread","cellsToReveal","yIdx","xIdx","event","key","App","display","components_Board_Board","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb05c841.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './cell.css';\n\nconst Cell = ({clickFn, revealed, cellNum, bomb, content, handleRightClick, flag}) => {\n\t\n\tfunction setNumColour (num) {\n\t\tswitch(num) {\n\t\t\tcase 1:\n\t\t\t\treturn \"#0b24fb\"\n\t\t\tcase 2:\n\t\t\t\treturn \"#228224\";\n\t\t\tcase 3:\n\t\t\t\treturn \"#fc0d1b\";\n\t\t\tcase 4:\n\t\t\t\treturn \"#020b79\";\n\t\t\tcase 5:\n\t\t\t\treturn \"#86272b\";\n\t\t\tcase 6:\n\t\t\t\treturn \"#007b7b\";\n\t\t\tcase 7:\n\t\t\t\treturn \"#090002\";\n\t\t\tcase 8:\n\t\t\t\treturn \"#7b7b7b\";\n\t\t\tdefault:\n\t\t\t\treturn \"#000\"\n\t\t}\n\t}\n\n\tconst cellClass = ['cell'];\n\t// revealed = true;\n\tif (revealed) {\n\t\tcellClass.push('cleared')\n\t};\n\tif (revealed && bomb) {\n\t\tcellClass.push('bomb')\n\t}\n\tlet cellContent = \"\";\n\tlet numColour = \"#FFFFFF\";\n\tif (revealed && content !== 0) {\n\t\tcellContent = content;\n\t\tnumColour = setNumColour(content)\n\t} else if (!revealed && flag) {\n\t\tcellContent = \"F\"\n\t}\n\tconsole.log(\"Cell color:\", numColour)\n\treturn (\n\t\t<div className={cellClass.join(' ')} onClick={clickFn} onContextMenu={handleRightClick} style={{color: numColour}}>\n\t\t\t{cellContent}\n\t\t</div>\n\t)\n}\n\nexport default Cell;","import React, {useState} from 'react';\nimport './board.css';\nimport Cell from './Cell/Cell';\n\nconst Board = ({height, width, numBombs}) => {\n\n\tconst [gameRunning, setGameState] = useState(true);\n\tconst [bombs, setBombs] = useState(numBombs);\n\n\tconst numSquares = height * width;\n\n\tconst inBounds = (x,y) => {\n\t\tif (x < 0 || y < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (x > width - 1 || y > height - 1 ) {\n\t\t\treturn null;\n\t\t} \n\t\treturn {x,y};\n\t}\n\n\tconst getAdjCells = (x,y) => {\n\t\tlet adjCells = [inBounds(x-1, y-1), inBounds(x, y-1), inBounds(x+1, y-1), inBounds(x-1, y), inBounds(x+1, y), inBounds(x-1, y+1), inBounds(x, y+1), inBounds(x+1, y+1)];\n\t\treturn adjCells.filter(cell => cell !== null)\n\t}\n\n\tconst createBoard = () => {\n\t\tlet cells = [];\n\t\tlet row = [];\n\t\tlet numCells = height * width;\n\t\tlet nums = [];\n\t\tlet bombPositions = [];\n\t\n\t\tfunction getRandomInt(max) {\n\t\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t\t  }\n\t\n\t\tfor (let i = 0; i < numCells; i++) {\n\t\t\tnums.push(i)\n\t\t};\n\t\n\t\tfor (let i = 0; i < numBombs; i++) {\n\t\t\tconst randomIdx = getRandomInt(nums.length);\n\t\t\tbombPositions.push(nums.splice(randomIdx, 1)[0]);\n\t\t}\n\t\n\t\tfor (let y = 0; y < height; y++) {\n\t\t\tfor (let x = 0; x < width; x++) {\n\t\t\t\tconst cellNum = (y+x) + (y * (width - 1));\n\t\t\t\t// console.log(\"cellNum\", cellNum)\n\t\t\t\trow.push({revealed: false, bomb: bombPositions.includes(cellNum), cellNum, flag: false})\n\t\t\t}\n\t\t\tcells.push(row);\n\t\t\trow = [];\n\t\t}\n\t\t// console.log(\"Board\", cells)\n\n\t\tfor (let y = 0; y < height; y++) {\n\t\t\tfor (let x = 0; x < width; x++) {\n\t\t\t\tconst adjCells = getAdjCells(x,y);\n\t\t\t\tlet count = 0;\n\t\t\t\tadjCells.forEach(cell => {\n\t\t\t\t\tif (cells[cell.y][cell.x].bomb) {\n\t\t\t\t\t\tcount ++;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tcells[y][x].count = count;\n\t\t\t}\n\t\t}\n\n\t\treturn cells;\n\t}\n\n\tconst cells = createBoard()\n\t\n\n\tconsole.log(cells)\n\n\tconst [data, setData] = useState(cells);\n\t// console.log(\"data\",data)\n\n\t\n\n\t// for (let y = 0; y < height; y++) {\n\t// \tfor (let x = 0; x < width; x++) {\n\t// \t\tconst adjCells = getAdjCells(x,y);\n\t// \t\tlet count = 0;\n\t// \t\tadjCells.forEach(cell => {\n\t// \t\t\tif (cells[cell.y][cell.x].bomb) {\n\t// \t\t\t\tcount ++;\n\t// \t\t\t}\n\t// \t\t})\n\t// \t\tcells[y][x].count = count;\n\t// \t}\n\t// }\n\n\t// cell checking\n\n\tfunction cellCheck(x,y){\n\t\tconst revealedCells = [];\n\t\tfunction checker(x,y) {\n\t\t\tconst cell = data[y][x];\n\t\t\tif(cell.count === 0) {\n\t\t\t\tif(!revealedCells.some(cell => cell.x === x && cell.y ===y)){\n\t\t\t\t\trevealedCells.push({x,y});\n\t\t\t\t\tgetAdjCells(x,y).forEach(cell => {\n\t\t\t\t\t\tchecker(cell.x,cell.y)\n\t\t\t\t\t})\n\t\t\t\t} \n\t\t\t} else {\n\t\t\t\trevealedCells.push({x,y});\n\t\t\t}\n\t\t}\n\t\tchecker(x,y);\n\t\treturn revealedCells\n\t}\n\n\tconst clickFn = (x,y,e) => {\n\t\te.preventDefault()\n\t\tconsole.log(\"click type\", e.type)\n\t\tconst cell = data[y][x];\n\t\tif (cell.bomb) {\n\t\t\tconsole.log(\"BANGG!\");\n\t\t\tconst dataCopy = data.map((y) => {\n\t\t\t\treturn y.map((x) => {\n\t\t\t\t\treturn Object.assign({}, x)\n\t\t\t\t})\n\t\t\t});\n\t\t\tdataCopy[y][x] = Object.assign({}, {...dataCopy[y][x], revealed:true})\n\t\t\tsetData(dataCopy);\n\t\t\tsetGameState(false);\n\t\t} else {\n\t\t\tconsole.log(cellCheck(x,y));\n\t\t\tconst cellsToReveal=cellCheck(x,y);\n\t\t\tconst dataCopy = data.map((y, yIdx) => {\n\t\t\t\treturn y.map((x,xIdx) => {\n\t\t\t\t\tif (cellsToReveal.some(cell => cell.x === xIdx && cell.y === yIdx)) {\n\t\t\t\t\t\treturn Object.assign({}, {...x, revealed:true} )\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Object.assign({}, x)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t\tsetData(dataCopy)\n\t\t}\n\t}\n\n\tconst handleRightClick = (x,y,event) => {\n\t\tconsole.log(\"event.type\", event.type)\n\t\tevent.preventDefault()\n\t\tconsole.log(\"dd\")\n\t\tconst dataCopy = data.map((y) => {\n\t\t\treturn y.map((x) => {\n\t\t\t\treturn Object.assign({}, x)\n\t\t\t})\n\t\t});\n\t\tdataCopy[y][x] = Object.assign({}, {...dataCopy[y][x], flag: !dataCopy[y][x].flag})\n\t\tsetData(dataCopy);\n\t\tsetBombs(() => {\n\t\t\tif (bombs > 0 ) {\n\t\t\t\treturn bombs - 1\n\t\t\t}\n\t\t\treturn bombs;\n\t\t})\n\t};\n\n\tconst resetGame = () => {\n\t\tconst cells = createBoard();\n\t\tconsole.log(\"cells\", cells)\n\t\tsetData(cells,setGameState(true));\n\t}\n\n\tlet numRevealed = 0\n\n\tdata.forEach(item => {\n\t\tnumRevealed = item.reduce( (curr,next) => {\n\t\t\t// console.log(\"NEXT:\", next)\n\t\t\tif (next.revealed) {\n\t\t\t\treturn curr + 1;\n\t\t\t} else {\n\t\t\t\treturn curr\n\t\t\t}\n\t\t}, numRevealed )\n\t})\n\n\t// console.log(\"numRevealed\", numRevealed)\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t<div>\n\t\t\t{\n\t\t\t\tgameRunning ? <p>Running</p> : numSquares - (numRevealed + numBombs) === 0 ? <p>Win!</p> : <p>Game over!</p>\n\t\t\t}\n\t\t\t\n\t\t\t<div onClick={() => {resetGame()}}>\n\t\t\t<p>Reset</p>\n\t\t\t</div>\n\n\t\t\t<p>Bombs: {bombs}</p>\n\t\t\t\n\t\t\t{\n\t\t\t\tnumSquares - (numRevealed + numBombs) ?\n\t\t\t\t<p>Danger squares left: {numSquares - (numRevealed + numBombs)}</p> : <p>Well done!</p>\n\t\t\t}\n\t\t\t\n\n\t\t\t</div>\n\t\t\t<div className='board' style={\n\t\t\t\t{\n\t\t\t\t\tgridTemplateColumns: `repeat(${width}, 25px)`,\n\t\t\t\t\tgridTemplateRows: `repeat(${height}, 25px)`\n\t\t\t\t}\n\t\t\t\t}>\n\t\t\t\t{\n\t\t\t\t\tdata.map( (rows, y) => \n\t\t\t\t\t\trows.map((item, x) => {\n\t\t\t\t\t\t\treturn <Cell clickFn={gameRunning ? e => {clickFn(x,y,e)} : null} handleRightClick={event => {handleRightClick(x,y,event)}} revealed={item.revealed} key={item.cellNum} cellNum={item.cellNum} bomb={item.bomb} content={item.bomb ? \"X\" : item.count} flag={item.flag} />\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Board;","import React, { Component } from 'react';\nimport './App.css';\nimport Board from \"./components/Board/Board\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Minesweeper</h1>\n\t\t<div style={{display: 'inline-block'}}>\n\t\t\t<Board width={15} height={15} numBombs={40} />\n\t\t</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}