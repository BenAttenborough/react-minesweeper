{"version":3,"sources":["components/Options/Options.js","CreateBoard.js","components/Board/DrawCell.js","gameLogic.js","components/InGameUI/InGameUI.js","components/Board/GameCanvas.js","components/Board/drawBoard.js","serviceWorker.js","index.js","App.js"],"names":["Options","_ref","setGameOptions","_useState","useState","_useState2","Object","slicedToArray","gameType","setGameType","_useState3","_useState4","height","setHeight","_useState5","_useState6","width","setWidth","_useState7","_useState8","numBombs","setNumBombs","useEffect","react_default","a","createElement","className","onSubmit","event","preventDefault","value","onChange","target","type","name","id","parseInt","inBounds","row","col","getAdjCells","adjCells","filter","cell","countBombsInAdjCells","cellsToCheck","board","count","forEach","bomb","createBoard","cells","bombPositions","rowContainer","cellNum","push","revealed","includes","flag","shape","Path2D","createCells","start","end","number","numbersArray","numbers","getNumbersArray","length","console","warn","max","randomNumbers","i","randomIdx","Math","floor","random","splice","getUniqueRandomNumbers","appendCountToCells","drawStrokedSquare","ctx","strokeColours","offSetX","offSetY","effectiveWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","filledCell","fillColour","item","textOffSetY","thisShape","fillStyle","drawSquare","sideLength","closePath","drawHex","fill","drawCell","font","fillText","drawFromContext","createCell","drawStrokedHex","strokedCell","updateGrid","data","setBoard","dataCopy","map","x","y","assign","objectSpread","handleBomb","cellsToReveal","revealedCells","checker","some","cellCheck","xIdx","yIdx","handleNonBomb","setFlag","toggle","toggleFlag","handleCanvasClick","clickType","canvasRef","cellWidth","setGameRunning","gameOptions","rect","current","getBoundingClientRect","rawX","clientX","left","rawY","clientY","top","getContext","isPointInPath","InGameUI","onClick","resetBoard","style","marginRight","GameCanvas","canvasWidthOffset","canvasHeightOffset","gameBoard","numCellsWide","numCellsHigh","revealedStrokeColours","React","useRef","numCells","numRevealed","canvas","createCanvas","fillColourRevealed","clickCords","rowPos","colPos","alternateOffset","drawBoard","ref","onContextMenu","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcd5f999.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./options.css\";\n\nexport default function({ setGameOptions }) {\n    const [gameType, setGameType] = useState(\"SQUARE\");\n    const [height, setHeight] = useState(15);\n    const [width, setWidth] = useState(15);\n    const [numBombs, setNumBombs] = useState(50);\n\n    useEffect(() => {\n        // console.log(\">>>>>> Options updated >>>>>>\");\n    });\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        const gameOptions = {\n            gameType,\n            height,\n            width,\n            numBombs\n        };\n        setGameOptions(gameOptions);\n    }\n\n    return (\n        <div className=\"panel\">\n            <form onSubmit={handleSubmit} className=\"optForm\">\n                <div className=\"optItem\">\n                    <label>Game type:</label>\n                    <select\n                        value={gameType}\n                        onChange={event => setGameType(event.target.value)}\n                    >\n                        <option value=\"SQUARE\">Square</option>\n                        <option value=\"HEX\">Hex</option>\n                    </select>\n                </div>\n                <div className=\"optItem\">\n                    <label>Height:</label>\n                    <input\n                        type=\"number\"\n                        name=\"height\"\n                        id=\"height\"\n                        value={height}\n                        onChange={event =>\n                            setHeight(parseInt(event.target.value))\n                        }\n                    />\n                </div>\n                <div className=\"optItem\">\n                    <label>Width:</label>\n                    <input\n                        type=\"number\"\n                        name=\"width\"\n                        id=\"width\"\n                        value={width}\n                        onChange={event =>\n                            setWidth(parseInt(event.target.value))\n                        }\n                    />\n                </div>\n                <div className=\"optItem\">\n                    <label>Number of bombs:</label>\n                    <input\n                        type=\"number\"\n                        name=\"numBombs\"\n                        id=\"numBombs\"\n                        value={numBombs}\n                        onChange={event => setNumBombs(event.target.value)}\n                    />\n                </div>\n                <div>\n                    <input type=\"submit\" value=\"Play\" className=\"optSubmit\" />\n                </div>\n            </form>\n        </div>\n    );\n}\n","/**\n * Checks if provided co-ordinates are in the bounds of provided grid.\n * Grid bounds represented by {width} and {height}\n * Returns null if co-ords are outside grid\n * or an object containing the co-ords if in bounds\n *\n * @param {Number} x\n * @param {Number} y\n * @param {Number} width\n * @param {Number} height\n */\nexport function inBounds(row, col, width, height) {\n    if (row < 0 || col < 0) {\n        return null;\n    }\n    if (row > height - 1 || col > width - 1) {\n        return null;\n    }\n    return { row, col };\n}\n\n/**\n * Returns all the cells adjacent to the cells at the provided co-ordinates.\n * Depends on the {type} of grid\n *\n * @param {Number} row\n * @param {Number} col\n * @param {Number} width\n * @param {Number} height\n * @param {String} type\n */\nexport function getAdjCells(row, col, width, height, type) {\n    // console.log(\"type >>\", type);\n    // console.log(`row ${row} col ${col}`);\n    let adjCells = [\n        inBounds(row - 1, col - 1, width, height),\n        inBounds(row, col - 1, width, height),\n        inBounds(row + 1, col - 1, width, height),\n        inBounds(row - 1, col, width, height),\n        inBounds(row + 1, col, width, height),\n        inBounds(row - 1, col + 1, width, height),\n        inBounds(row, col + 1, width, height),\n        inBounds(row + 1, col + 1, width, height)\n    ];\n    // New\n    if (type === \"HEX\") {\n        // console.log(\"Row\", row);\n        // console.log(\"Col - 1\", col - 1);\n        if ((row + 1) % 2 !== 0) {\n            adjCells = [\n                inBounds(row - 1, col - 1, width, height),\n                inBounds(row - 1, col, width, height),\n                inBounds(row, col - 1, width, height),\n                inBounds(row, col + 1, width, height),\n                inBounds(row + 1, col - 1, width, height),\n                inBounds(row + 1, col, width, height)\n            ];\n        } else {\n            adjCells = [\n                inBounds(row - 1, col + 1, width, height),\n                inBounds(row - 1, col, width, height),\n                inBounds(row, col - 1, width, height),\n                inBounds(row, col + 1, width, height),\n                inBounds(row + 1, col + 1, width, height),\n                inBounds(row + 1, col, width, height)\n            ];\n        }\n    }\n    // New\n    // console.log(\n    //     \"adjCells.filter(cell => cell !== null)\",\n    //     adjCells.filter(cell => cell !== null)\n    // );\n    return adjCells.filter(cell => cell !== null);\n}\n\n/**\n * Returns a random int between 0 and provided int\n *\n * @param {Number} max\n * @return {Number}\n */\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\n/**\n * Returns arry of numbers\n *\n * @param {Number} start\n * @param {Number} end\n */\nexport function getNumbersArray(start, end) {\n    if (start > end) {\n        return [];\n    }\n    if (start === end) {\n        return [start];\n    }\n    const numbers = [];\n    for (start; start <= end; start++) {\n        numbers.push(start);\n    }\n    return numbers;\n}\n\nexport function getUniqueRandomNumbers(start, end, number) {\n    const numbersArray = getNumbersArray(start, end);\n    if (numbersArray.length === 0) {\n        console.warn(\"No numbers available to choose from\");\n        return numbersArray;\n    }\n    if (numbersArray.length <= number) {\n        console.warn(\n            \"You have requested more random numbers than number available\"\n        );\n        // Return all numbers\n        return numbersArray;\n    }\n    const randomNumbers = [];\n    for (let i = 0; i < number; i++) {\n        const randomIdx = getRandomInt(numbersArray.length);\n        randomNumbers.push(numbersArray.splice(randomIdx, 1)[0]);\n    }\n    return randomNumbers;\n}\n\n// Needs test\nfunction createCells(width, height, bombPositions, type) {\n    // console.log(\"createCells type\", type);\n    let cells = [];\n    let rowContainer = [];\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            const cellNum = row + col + row * (width - 1);\n            const adjCells = getAdjCells(row, col, width, height, type);\n            rowContainer.push({\n                revealed: false,\n                bomb: bombPositions.includes(cellNum),\n                cellNum,\n                flag: false,\n                row,\n                col,\n                adjCells,\n                shape: new Path2D()\n            });\n        }\n        cells.push(rowContainer);\n        rowContainer = [];\n    }\n    return cells;\n}\n\nfunction countBombsInAdjCells(cellsToCheck, board) {\n    let count = 0;\n    cellsToCheck.forEach(cell => {\n        const cellToCheck = board[cell.row][cell.col];\n        // console.log(`board[${cell.row}][${cell.col}]`, cellToCheck);\n        if (cellToCheck.bomb) {\n            count++;\n        }\n    });\n    return count;\n}\n\nfunction appendCountToCells(cells, type) {\n    const height = cells.length;\n    const width = cells[0].length;\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            const adjCells = getAdjCells(row, col, width, height, type);\n            cells[row][col].count = countBombsInAdjCells(adjCells, cells);\n        }\n    }\n    return cells;\n}\n\n/**\n * Returns a two dimensional array of objects depending on specified params\n *\n * Shape of each object is:\n * bomb: {bool - whether there is a bomb in the cell or not}\n * cellNum: {int - a unique cell number}\n * count: {int - number of bombs adjacent to cell}\n * flag: {bool - whether the cell has been flagged}\n * revealed: {bool - whether the cell has been revealed}\n * x: {int - x co-ordinate}\n * y: {int - y co-ordinate}\n *\n * @param {Number} width\n * @param {Number} height\n * @param {Number} numBombs\n * @param {String} type\n */\nexport function createBoard(width, height, numBombs, type) {\n    // console.log(\"type\", type);\n    // console.log(\"height\", height);\n    // console.log(\"type!\", type);\n    let numCells = width * height;\n    let bombPositions = getUniqueRandomNumbers(0, numCells, numBombs);\n    let cells = createCells(width, height, bombPositions, type);\n    cells = appendCountToCells(cells, type);\n    return cells;\n}\n","function strokedCell(type, ctx, width, offSetX, offSetY, strokeColours) {\n    switch (type) {\n        case \"SQUARE\":\n            drawStrokedSquare(width, ctx, strokeColours, offSetX, offSetY);\n            break;\n        case \"HEX\":\n            drawStrokedHex(width, ctx, strokeColours, offSetX, offSetY);\n            break;\n        default:\n            drawStrokedSquare(width, ctx, strokeColours, offSetX, offSetY);\n    }\n}\n\nfunction drawStrokedSquare(width, ctx, strokeColours, offSetX, offSetY) {\n    const effectiveWidth = width - 2;\n    // Top\n    ctx.strokeStyle = strokeColours[0];\n    ctx.beginPath();\n    ctx.moveTo(offSetX, offSetY);\n    ctx.lineTo(effectiveWidth + offSetX, offSetY);\n    ctx.stroke();\n    // Right\n    ctx.strokeStyle = strokeColours[1];\n    ctx.beginPath();\n    ctx.moveTo(effectiveWidth + offSetX, offSetY);\n    ctx.lineTo(effectiveWidth + offSetX, effectiveWidth + offSetY);\n    ctx.stroke();\n    // Bottom\n    ctx.strokeStyle = strokeColours[2];\n    ctx.beginPath();\n    ctx.moveTo(effectiveWidth + offSetX, effectiveWidth + offSetY);\n    ctx.lineTo(offSetX, effectiveWidth + offSetY);\n    ctx.stroke();\n    // Left\n    ctx.strokeStyle = strokeColours[3];\n    ctx.beginPath();\n    ctx.moveTo(offSetX, effectiveWidth + offSetY);\n    ctx.lineTo(offSetX, offSetY);\n    ctx.stroke();\n}\n\nfunction drawStrokedHex(width, ctx, strokeColours, offSetX, offSetY) {\n    const effectiveWidth = width - 2;\n    const sideLength = effectiveWidth / 2;\n    ctx.strokeStyle = strokeColours[0];\n    ctx.beginPath();\n    ctx.moveTo(offSetX + sideLength, offSetY);\n    ctx.lineTo(offSetX + effectiveWidth, offSetY + sideLength);\n    ctx.stroke();\n    ctx.strokeStyle = strokeColours[1];\n    ctx.beginPath();\n    ctx.lineTo(offSetX + effectiveWidth, offSetY + sideLength * 2);\n    ctx.lineTo(offSetX + sideLength, offSetY + sideLength * 3);\n    ctx.lineTo(offSetX, offSetY + sideLength * 2);\n    ctx.stroke();\n    ctx.strokeStyle = strokeColours[0];\n    ctx.beginPath();\n    ctx.lineTo(offSetX, offSetY + sideLength);\n    ctx.stroke();\n}\n\nfunction filledCell(type, ctx, width, offSetX, offSetY, fillColour, item) {\n    const thisShape = item.shape;\n    const effectiveWidth = width - 2;\n    drawCell(\n        type,\n        ctx,\n        fillColour,\n        thisShape,\n        offSetX,\n        offSetY,\n        effectiveWidth\n    );\n    let textOffSetY;\n    switch (type) {\n        case \"HEX\":\n            textOffSetY = offSetY + 3;\n            break;\n        default:\n            textOffSetY = offSetY;\n    }\n    drawFromContext(item, ctx, thisShape, offSetX, textOffSetY, width);\n}\n\nfunction drawCell(\n    type,\n    ctx,\n    fillColour,\n    thisShape,\n    offSetX,\n    offSetY,\n    effectiveWidth\n) {\n    ctx.fillStyle = fillColour;\n    switch (type) {\n        case \"SQUARE\":\n            drawSquare(thisShape, offSetX, offSetY, effectiveWidth);\n            break;\n        case \"HEX\":\n            drawHex(thisShape, offSetX, offSetY, effectiveWidth);\n            break;\n        default:\n            drawSquare(thisShape, offSetX, offSetY, effectiveWidth);\n    }\n\n    ctx.fill(thisShape);\n}\n\nfunction drawSquare(thisShape, offSetX, offSetY, effectiveWidth) {\n    thisShape.moveTo(offSetX, offSetY);\n    thisShape.lineTo(effectiveWidth + offSetX, offSetY);\n    thisShape.lineTo(effectiveWidth + offSetX, effectiveWidth + offSetY);\n    thisShape.lineTo(offSetX, effectiveWidth + offSetY);\n    thisShape.closePath();\n}\n\nfunction drawHex(thisShape, offSetX, offSetY, effectiveWidth) {\n    const sideLength = effectiveWidth / 2;\n    thisShape.moveTo(offSetX + sideLength, offSetY);\n    thisShape.lineTo(offSetX + effectiveWidth, offSetY + sideLength);\n    thisShape.lineTo(offSetX + effectiveWidth, offSetY + sideLength * 2);\n    thisShape.lineTo(offSetX + sideLength, offSetY + sideLength * 3);\n    thisShape.lineTo(offSetX, offSetY + sideLength * 2);\n    thisShape.lineTo(offSetX, offSetY + sideLength);\n    thisShape.closePath();\n}\n\nfunction drawFromContext(item, ctx, thisShape, offSetX, offSetY, width) {\n    ctx.font = \"16px sans-serif\";\n    let fillColour = \"black\";\n    switch (item.count) {\n        case 1:\n            fillColour = \"green\";\n            break;\n        case 2:\n            fillColour = \"blue\";\n            break;\n        case 3:\n            fillColour = \"yellow\";\n            break;\n        case 4:\n            fillColour = \"red\";\n            break;\n        default:\n            fillColour = \"black\";\n    }\n    ctx.fillStyle = fillColour;\n    if (item.revealed) {\n        if (item.bomb) {\n            ctx.fillStyle = \"red\";\n            ctx.fill(thisShape);\n        } else {\n            if (item.count > 0) {\n                ctx.fillText(item.count, offSetX + 4, offSetY + width - 5);\n            }\n        }\n    } else if (item.flag) {\n        ctx.fillStyle = \"black\";\n        ctx.fillText(\"F\", offSetX + 4, offSetY + width - 5);\n    }\n}\n\nexport default function createCell(\n    type,\n    ctx,\n    width,\n    offSetX,\n    offSetY,\n    fillColour,\n    strokeColours,\n    item\n) {\n    // console.log(\"item\", item);\n    filledCell(type, ctx, width, offSetX, offSetY, fillColour, item);\n    strokedCell(type, ctx, width, offSetX, offSetY, strokeColours);\n}\n","import { createBoard } from \"./CreateBoard\";\n\nfunction cellCheck(board, row, col) {\n    const revealedCells = [];\n    function checker(row, col) {\n        const cell = board[row][col];\n        if (cell.count === 0) {\n            if (\n                !revealedCells.some(\n                    cell => cell.row === row && cell.col === col\n                )\n            ) {\n                revealedCells.push({ row, col });\n                cell.adjCells.forEach(cell => {\n                    checker(cell.row, cell.col);\n                });\n            }\n        } else {\n            revealedCells.push({ row, col });\n        }\n    }\n    checker(row, col);\n    return revealedCells;\n}\n\nconst updateGrid = (data, cell, setBoard, numBombs) => {\n    // console.log(\"Adjacent cells:\", cell.adjCells);\n    // console.log(\"data:\", data);\n\n    // const numRevealed = data.map(row => {\n    // \treturn row.map(cell => {\n    // \t\treturn\n    // \t})\n    // })\n    // const mockReveal = [\n    //     {\n    //         col: 1,\n    //         row: 0\n    //     }\n    // ];\n    // const cellsToReveal = cell.adjCells;\n    // const dataCopy = data.map((x, xIdx) => {\n    //     return x.map((y, yIdx) => {\n    //         if (\n    //             cellsToReveal.some(\n    //                 cell => cell.col === yIdx && cell.row === xIdx\n    //             )\n    //         ) {\n    //             return Object.assign({}, { ...y, revealed: true });\n    //         } else {\n    //             return Object.assign({}, y);\n    //         }\n    //     });\n    // });\n    // setBoard(dataCopy);\n\n    // console.log(\"data\", data);\n    // console.log(\"cell\", cell);\n    if (cell.bomb) {\n        handleBomb(data, setBoard);\n    } else {\n        handleNonBomb(data, cell, setBoard, numBombs);\n    }\n};\n\nfunction handleNonBomb(data, cell, setBoard, numBombs) {\n    // console.log(\"cellCheck\", cellCheck(data, cell.row, cell.col));\n    const cellsToReveal = cellCheck(data, cell.row, cell.col);\n    const dataCopy = data.map((x, xIdx) => {\n        return x.map((y, yIdx) => {\n            if (\n                cellsToReveal.some(\n                    cell => cell.col === yIdx && cell.row === xIdx\n                )\n            ) {\n                return Object.assign({}, { ...y, revealed: true });\n            } else {\n                return Object.assign({}, y);\n            }\n        });\n    });\n    // let numRevealed = 0;\n    // dataCopy.forEach(row => {\n    //     row.forEach(cell => {\n    //         if (cell.revealed) {\n    //             numRevealed++;\n    //         }\n    //     });\n    // });\n    // console.log(\"Num revealed:\", numRevealed);\n    // console.log(\"Cells to reveal:\", numBombs - numRevealed);\n    setBoard(dataCopy);\n}\n\n/**\n * Reveal all cells if bomb clicked\n *\n * @param {*} data\n * @param {*} setBoard\n */\nfunction handleBomb(data, setBoard) {\n    let dataCopy = data.map(x => {\n        return x.map(y => {\n            return Object.assign({}, { ...y, revealed: true });\n        });\n    });\n    setBoard(dataCopy);\n}\n\nfunction toggleFlag(cell, data, toggle) {\n    // console.log(\"Toggling flag\");\n    // console.log(\"cell >>\", cell);\n\n    const dataCopy = data.map((x, xIdx) => {\n        return x.map((y, yIdx) => {\n            // console.log(\"cell.row\", cell.row);\n            // console.log(\"xIdx\", xIdx);\n            // console.log(\"cell.col\", cell.col);\n            // console.log(\"yIdx\", yIdx);\n            if (cell.row === xIdx && cell.col === yIdx) {\n                // console.log(\"MATCH >>>\");\n                return Object.assign({}, { ...y, flag: toggle });\n            } else {\n                return Object.assign({}, y);\n            }\n        });\n    });\n    // console.log(\"dataCopy\", dataCopy);\n    return dataCopy;\n}\n\nfunction setFlag(data, cell, setBoard) {\n    // console.log(\"data\", data);\n    // console.log(\"cell\", cell);\n    if (!cell.revealed) {\n        setBoard(toggleFlag(cell, data, !cell.flag));\n    }\n}\n\nexport function handleCanvasClick(\n    event,\n    clickType,\n    canvasRef,\n    cellWidth,\n    board,\n    setBoard,\n    setGameRunning,\n    gameOptions\n) {\n    // console.log(\"Handling canvas click\", event);\n    event.preventDefault();\n    var rect = canvasRef.current.getBoundingClientRect();\n    var rawX = event.clientX - rect.left;\n    var rawY = event.clientY - rect.top;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    board.forEach(x => {\n        x.forEach(cell => {\n            const isInPath = ctx.isPointInPath(cell.shape, rawX, rawY);\n            // console.log(\"CALLED\");\n            // console.log(\"cell hit >>>>>>>>>>\", cell);\n            if (isInPath) {\n                // console.log(\"In path:\", cell);\n                // updateBoard\n                if (clickType === \"LEFT\" && !cell.flag) {\n                    updateGrid(board, cell, setBoard, gameOptions.numBombs);\n                }\n                if (clickType === \"RIGHT\") {\n                    // console.log(\"Right click\");\n                    setFlag(board, cell, setBoard);\n                }\n            }\n        });\n    });\n}\n\nexport function resetBoard(gameOptions, setBoard) {\n    const newBoard = createBoard(\n        gameOptions.width,\n        gameOptions.height,\n        gameOptions.numBombs,\n        gameOptions.gameType\n    );\n    setBoard(newBoard);\n}\n","import React from \"react\";\nimport { resetBoard } from \"../../gameLogic\";\n\nexport default function InGameUI({\n    gameOptions,\n    setGameOptions,\n    setBoard,\n    cellsToReveal\n}) {\n    // console.log(\">>>>gameOptions\", gameOptions);\n    // const [cellsToReveal, setCellsToReveal] = useState(height * width);\n\n    return (\n        <div className={\"inGameUI\"}>\n            <button\n                onClick={() => {\n                    resetBoard(gameOptions, setBoard);\n                }}\n                style={{ marginRight: 1 + \"rem\" }}\n            >\n                Reset\n            </button>\n            <button\n                onClick={() => {\n                    setGameOptions(null);\n                }}\n            >\n                New Game\n            </button>\n            <p>Cells to reveal: {cellsToReveal}</p>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { createBoard } from \"../../CreateBoard\";\nimport drawBoard from \"./drawBoard\";\nimport { handleCanvasClick } from \"../../gameLogic\";\nimport InGameUI from \"../InGameUI/InGameUI\";\n\n// export default function GameCanvas({ board, setBoard, setGameRunning }) {\nexport default function GameCanvas({\n    setGameRunning,\n    gameOptions,\n    setGameOptions\n}) {\n    // console.log(\"gameOptions>\", gameOptions);\n    // console.log(\"setGameOptions\", setGameOptions);\n    let { gameType } = gameOptions;\n    let canvasWidthOffset = 0;\n    let canvasHeightOffset = 0;\n    switch (gameType) {\n        case \"HEX\":\n            canvasWidthOffset += gameOptions.width / 2;\n            canvasHeightOffset += gameOptions.height / 2;\n            break;\n        default:\n            canvasWidthOffset = 0;\n            canvasHeightOffset = 0;\n    }\n\n    // console.log(\"gameOptions >X>\", gameOptions);\n    const gameBoard = createBoard(\n        gameOptions.width,\n        gameOptions.height,\n        gameOptions.numBombs,\n        gameOptions.gameType\n    );\n    const [board, setBoard] = useState(gameBoard);\n\n    // console.log(\"GameCanvas board\", board);\n    function createCanvas(canvasRef) {\n        const canvas = canvasRef.current;\n        return canvas.getContext(\"2d\");\n    }\n    const numCellsWide = board[0].length;\n    const numCellsHigh = board.length;\n    const width = 20;\n    const fillColour = \"darkgray\";\n    const fillColourRevealed = \"lightgray\";\n    const strokeColours = [\"#FFFFFF\", \"#000000\", \"#000000\", \"#FFFFFF\"];\n    const revealedStrokeColours = [\"#000000\", \"#FFFFFF\", \"#FFFFFF\", \"#000000\"];\n    let canvasRef = React.useRef(null);\n\n    const numCells = gameOptions.width * gameOptions.height;\n    let numRevealed = 0;\n    board.forEach(row => {\n        row.forEach(cell => {\n            if (cell.revealed) {\n                numRevealed++;\n            }\n        });\n    });\n    let cellsToReveal = numCells - gameOptions.numBombs - numRevealed;\n    if (cellsToReveal < 1) {\n        cellsToReveal = 0;\n    }\n    // console.log(\">>>>numRevealed>>>>\", numRevealed);\n    // console.log(\"Cells to reveal :\", cellsToReveal);\n\n    useEffect(() => {\n        const canvas = createCanvas(canvasRef);\n        drawBoard(\n            gameOptions,\n            canvas,\n            board,\n            width,\n            fillColour,\n            fillColourRevealed,\n            strokeColours,\n            revealedStrokeColours\n        );\n    });\n\n    return (\n        <div>\n            <InGameUI\n                gameOptions={gameOptions}\n                setGameOptions={setGameOptions}\n                setBoard={setBoard}\n                cellsToReveal={cellsToReveal}\n            />\n            <canvas\n                ref={canvasRef}\n                width={numCellsWide * width + canvasWidthOffset}\n                height={numCellsHigh * width + canvasHeightOffset}\n                className=\"board\"\n                onClick={event => {\n                    handleCanvasClick(\n                        event,\n                        \"LEFT\",\n                        canvasRef,\n                        width,\n                        board,\n                        setBoard,\n                        setGameRunning,\n                        gameOptions\n                    );\n                }}\n                onContextMenu={event => {\n                    handleCanvasClick(\n                        event,\n                        \"RIGHT\",\n                        canvasRef,\n                        width,\n                        board,\n                        setBoard\n                    );\n                }}\n            />\n        </div>\n    );\n}\n","import createCell from \"./DrawCell\";\n// import createHex from \"./DrawHex\";\n\nexport default function drawBoard(\n    gameOptions,\n    canvas,\n    board,\n    width,\n    fillColour,\n    fillColourRevealed,\n    strokeColours,\n    revealedStrokeColours,\n    clickCords\n) {\n    // console.log(\"board\", board);\n    // console.log(\"board[0][0]\", board[0][0].shape);\n    // console.log(\"gameOptions>>>>>>>>>>>>>>>\", gameOptions);\n    const { gameType } = gameOptions;\n    board.forEach((row, rowPos) => {\n        return row.forEach((item, colPos) => {\n            // console.log(\"item\", item);\n            let alternateOffset = 0;\n            if (gameType === \"HEX\") {\n                alternateOffset = rowPos % 2 ? width / 2 : 0;\n            }\n            createCell(\n                gameType,\n                canvas,\n                width,\n                width * colPos + alternateOffset,\n                width * rowPos,\n                item.revealed ? fillColourRevealed : fillColour,\n                item.revealed ? revealedStrokeColours : strokeColours,\n                item\n            );\n        });\n    });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Options from \"./components/Options/Options\";\nimport GameCanvas from \"./components/Board/GameCanvas\";\n\nexport default function App() {\n    // const [gameRunning, setGameRunning] = useState(false);\n    const [gameOptions, setGameOptions] = useState(null);\n\n    return (\n        <div className=\"App\">\n            <h1>Polysweeper</h1>\n            {gameOptions ? (\n                <GameCanvas\n                    gameOptions={gameOptions}\n                    setGameOptions={setGameOptions}\n                />\n            ) : (\n                <Options setGameOptions={setGameOptions} />\n            )}\n        </div>\n    );\n}\n"],"sourceRoot":""}